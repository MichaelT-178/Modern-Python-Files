\"\"\"\n
This program is a command line interface tool for the\n
\"yt-dlp\" library. It allows you to download entire\n
youtube videos, download specific intervals of the\n
video and rename the mp4 file you're downloading.\n
\"\"\"\n\n

import os; os.system('clear')\n
import subprocess\n
from pytube import YouTube\n
from termcolor import colored as c\n
import inquirer\n\n

save_dir = \"Videos\"\n\n

CURRENT_DOWNLOAD_PATH = f\"../{save_dir}/\"\n\n

if os.path.exists(CURRENT_DOWNLOAD_PATH):\n\t
    os.system(f\"open -a Finder '{CURRENT_DOWNLOAD_PATH}'\")\n\t
    print(f\"{c('CURRENT DOWNLOAD PATH', 'magenta')}: {os.path.abspath(CURRENT_DOWNLOAD_PATH)}/\")\n\t
    print(\"Finder has been opened to current download path. See updates in real time.\")\n
else:\n\t
    print(c(f\"Path does not exist: \\\"{CURRENT_DOWNLOAD_PATH}\\\"\", 'red'))\n\t
    print(\"Go and fix path\n\")\n\t
    exit(0)\n\n

def time_to_seconds(time) -> int:\n\t
    \"\"\" Converts int seconds to formatted time. \"\"\"\n\t
    t = [int(x) for x in time.split(\":\")]\n\t
    return t[1] + (t[0] * 60) if (len(t) == 2) else t[2] + (t[1] * 60) + (t[0] * 3600)\n\n

def seconds_to_time(seconds) -> str:\n\t
    \"\"\" Converts time to seconds \"\"\"\n\t
    if seconds < 60:\n\t\t
        return f\"0:{seconds:02}\"\n\t
    elif seconds < 3600:\n\t\t
        minutes = seconds // 60\n\t\t
        seconds %= 60\n\t\t
        return f\"{minutes}:{seconds:02}\"\n\t
    else:\n\t\t
        hours = seconds // 3600\n\t\t
        seconds %= 3600\n\t\t
        minutes = seconds // 60\n\t\t
        seconds %= 60\n\t\t
        return f\"{hours}:{minutes:02}:{seconds:02}\"\n\n

def get_choice(the_message):\n\t
    green_yes = c(\"Yes\", 'green')\n\t
    red_no = c('No', 'red')\n\n\t

    print()\n\t
    questions = [\n\t\t
        inquirer.List('choice',\n\t\t\t\t\t
                      message=the_message,\n\t\t\t\t\t
                      choices=[green_yes, red_no]\n\t\t\t\t\t
                      ),\n\t
    ]\n\n\t

    answers = inquirer.prompt(questions)\n\t
    return answers\n\n

url = input(f\"\nEnter {c('youtube link', 'red')} : \")\n\n

video_len = YouTube(url).length\n\n

print(f\"Video length is {c(seconds_to_time(video_len), 'cyan')}\")\n\n

message = f\"Do you want to download a {c('specific time interval', 'blue')} (y/n) ? \"\n
is_time_interval = get_choice(message)\n\n

#'\\x1b[32mYes\\x1b[0m' the color made the string weird\n
if \"Yes\" in is_time_interval['choice']:\n\t
    print(\"\nThe format has to be (00:00:00) or (00:00). Ex: 3:12:11 or 8:07 or 21:32\")\n\n\t

    start_time = input(\"\nEnter a start time: \").strip()\n\n\t

    while time_to_seconds(start_time) > video_len:\n\t\t
        print(\"\nInvalid start time\")\n\t\t
        start_time = input(\"Enter a start time: \").strip()\n\n\t

    end_time = input(\"Enter an end time: \").strip()\n\n\t

    while time_to_seconds(start_time) > video_len:\n\n\t\t
        print(\"\nInvalid end time\")\n\n\t\t
        end_time = input(\"Enter an end time: \").strip()\n\n\t

    download_length = seconds_to_time(time_to_seconds(end_time) - time_to_seconds(start_time))\n\n\t

    print(f\"\nLength of download will be -> {c(download_length, 'blue')}\n\")\n\n\t

    new_name = \"\"\n\n\t

    rename_message = f\"Do you want to rename the file? {c('(y/n)', 'red')} \"\n\t
    do_rename = get_choice(rename_message)\n\n\t

    if \"Yes\" in do_rename['choice']:\n\t\t
        name = input(\"\nNew name of file (without extension): \")\n\t\t
        new_name = f'-o \"{name}.%(ext)s\"'\n\t\t
        print(f\"File's new name is {c(name, 'blue')}{c('.webm', 'blue')}\")\n\n\t

    print()\n\t
    download_with_time = get_choice(\"Ready to download? \")\n\n\t

    if \"Yes\" in download_with_time['choice']:\n\n\t\t

        os.chdir(CURRENT_DOWNLOAD_PATH)\n\n\t\t

        print()\n\t\t
        os.system(f'yt-dlp {new_name.strip()} \"{url.strip()}\" --download-sections \"*{start_time}-{end_time}\"')\n\t\t
        print(c(\"VIDEO SUCCESSFULLY DOWNLOADED\", 'green'))\n\n\t\t
        
        get_file_name = subprocess.check_output(\"ls -t | head -n 1\", shell=True)\n\t
        name_of_file = get_file_name.decode('utf-8').strip()\n\t
        name_of_file_wo_extension = name_of_file.rsplit('.', 1)[0]\n\n\t

        print()\n\t
        convert_video_message = f\"Do you want to convert the video to {c('mp4', 'blue')}? \"\n\t
        convert_video = get_choice(convert_video_message)\n\t

        if \"Yes\" in convert_video['choice']:\n\t\t
            os.system(f\"ffmpeg -i \\\"{name_of_file_wo_extension}\\\".webm \\\"{name_of_file_wo_extension}\\\".mp4\")\n\t\t
            os.remove(f\"{name_of_file_wo_extension}.webm\")\n\t\t
            print(c(\"Successfully deleted the webm file and converted to mp4\", 'green'))\n\n\t

        print(c(\"Done\", 'green'))\n\n\t

        exit(0)\n\n\n


new_name = \"\"\n\n

print()\n
rename_message = f\"Do you want to rename the file? {c('(y/n)', 'red')} \"\n
rename_vid = get_choice(rename_message)\n\n

if \"Yes\" in rename_vid['choice']:\n\n\t
    name = input(\"\nNew name of file (without extension): \")\n\t
    new_name = f'-o \"{name.strip()}.%(ext)s\"'\n\t
    print(f\"File's new name is {c(name, 'blue')}{c('.webm', 'blue')}\")\n\n

print()\n
download_vid = get_choice(\"Ready to download? \")\n\n

if \"Yes\" in download_vid['choice']:\n\t
    os.chdir(CURRENT_DOWNLOAD_PATH)\n\n\t

    print()\n\n\t

    #--no-mtime sets the date created to now\n\t
    os.system(f'yt-dlp --no-mtime {new_name} \"{url.strip()}\"')\n\n\t

    print(c(\"VIDEO SUCCESSFULLY DOWNLOADED\", 'green'))\n\n\t
    
    # Run the shell command and capture its output\n\t
    get_file_name = subprocess.check_output(\"ls -t | head -n 1\", shell=True)\n\n\t

    # Convert the byte string to a regular string\n\t
    name_of_file = get_file_name.decode('utf-8').strip()\n\t
    name_of_file_wo_extension = name_of_file.rsplit('.', 1)[0]\n\n\t
    
    print()\n\t
    convert_vid_message = f\"Do you want to convert the video to {c('mp4', 'blue')}? \"\n\t
    convert_vid = get_choice(convert_vid_message)\n\n\t

    if \"Yes\" in convert_vid['choice']:\n\t\t
        os.system(f\"ffmpeg -i \\\"{name_of_file_wo_extension}\\\".webm \\\"{name_of_file_wo_extension}\\\".mp4\")\n\t\t
        os.remove(f\"{name_of_file_wo_extension}.webm\")\n\t\t
        print(c(\"Successfully deleted the webm file and converted to mp4\", 'green'))\n\n\t
        
    print(c(\"Done\", 'green'))\n